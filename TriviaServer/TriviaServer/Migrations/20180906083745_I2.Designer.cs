// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TriviaServer;

namespace TriviaServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180906083745_I2")]
    partial class I2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TriviaServer.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.Property<int>("NumberOfUses");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TriviaServer.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UniqueKey");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TriviaServer.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameroomId");

                    b.Property<string>("PlayerName");

                    b.Property<int>("PlayerScore");

                    b.HasKey("PlayerId");

                    b.HasIndex("GameroomId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TriviaServer.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("CorrectAnswer");

                    b.Property<int>("QuestionDifficulty");

                    b.Property<string>("QuestionText");

                    b.Property<int>("Test");

                    b.Property<string>("WrongAnswer1");

                    b.Property<string>("WrongAnswer2");

                    b.Property<string>("WrongAnswer3");

                    b.HasKey("QuestionId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("TriviaServer.Models.Player", b =>
                {
                    b.HasOne("TriviaServer.Models.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameroomId")
                        .HasConstraintName("ForeignKey_Player_Game")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TriviaServer.Models.Question", b =>
                {
                    b.HasOne("TriviaServer.Models.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("ForeignKey_Question_Category")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
